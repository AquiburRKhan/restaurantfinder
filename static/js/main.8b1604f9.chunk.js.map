{"version":3,"sources":["utils/axios.js","components/RestaurantModal.js","components/RestaurantPanel.js","App.js","serviceWorker.js","index.js"],"names":["ClientID","ClientSecret","RestaurantModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnHide","bind","assertThisInitialized","handleModalClose","_this$props","showModal","restaurant","mapProps","center","lat","venue","location","lng","zoom","react_default","a","createElement","Modal","id","show","onHide","Header","closeButton","Title","name","Body","lib_default","bootstrapURLKeys","key","defaultCenter","defaultZoom","Footer","Button","onClick","Component","RestaurantPanel","handleModalShow","state","setState","iconUrl","categories","icon","prefix","suffix","address","Col","xs","sm","md","lg","Panel","Heading","componentClass","src","alt","height","width","className","components_RestaurantModal","App","handleInputChange","searchRestaurants","searchRandomRestaurant","showRestaurantDetails","searchTerm","restaurants","components_RestaurantPanel","e","target","value","_this2","axios","get","then","response","data","groups","items","Math","floor","random","catch","error","_this3","preventDefault","Grid","fluid","Row","mdOffset","lgOffset","onSubmit","FormGroup","ControlLabel","FormControl","placeholder","onChange","type","block","bsStyle","map","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b1604f9.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst ClientID = 'ZQHLRBKWGNBL0OFWUBZKEIDUDN5TMERLPFP54EZKHG2ZG52T';\nconst ClientSecret = '3HJMJKAT0TFEDFNT5AI21DIH3G4FOEIS5GLITW4KZBIE2352';\nconst longLat = '23.793818,90.404720';\nconst versioning = '20181115';\nconst radius = '1000';\n\nexport const searchNearbyRestaurants = (searchTerm) => {\n    return axios.get('https://api.foursquare.com/v2/venues/explore?client_id=' + ClientID +\n        '&client_secret=' + ClientSecret + '&v=' + versioning + '&limit=10&ll=' + longLat + '&radius=' + radius + '&query=' + searchTerm);\n};\n\nexport const searchForRandomRestaurants = () => {\n    let limit = 50;\n    return axios.get('https://api.foursquare.com/v2/venues/explore?client_id=' + ClientID + '&section=food' +\n        '&client_secret=' + ClientSecret + '&v=' + versioning + '&limit=10&ll=' + longLat + '&radius=' + radius + '&limit=' + limit);\n};","import React, { Component } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport GoogleMapReact from 'google-map-react';\nimport '../styles/index.scss';\n\nclass RestaurantModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleOnHide = this.handleOnHide.bind(this);\n    }\n\n    handleOnHide(){\n        this.props.handleModalClose();\n    }\n\n    render() {\n        const { showModal,restaurant } = this.props;\n        const mapProps = {\n            center: {\n                lat: restaurant.venue.location.lat,\n                lng: restaurant.venue.location.lng\n            },\n            zoom: 18\n        };\n        return (\n            <Modal id=\"restaurant-modal\" show={ showModal } onHide={this.handleOnHide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{restaurant.venue.name}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div id=\"map\">\n                        <GoogleMapReact\n                            bootstrapURLKeys={{ key: 'AIzaSyANykK8s9hAotra-WdhxeFqmPJAQT1Wzjc' }}\n                            defaultCenter={mapProps.center}\n                            defaultZoom={mapProps.zoom}>\n                        </GoogleMapReact>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={this.handleOnHide}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default RestaurantModal;\n","import React, { Component } from 'react';\nimport { Col, Panel } from 'react-bootstrap';\nimport RestaurantModal from './RestaurantModal';\nimport '../styles/index.scss';\n\nclass RestaurantPanel extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleModalShow = this.handleModalShow.bind(this);\n        this.handleModalClose = this.handleModalClose.bind(this);\n\n        this.state = {\n            showModal: false\n        };\n    }\n\n    handleModalShow() {\n        this.setState({showModal: true});\n    }\n\n    handleModalClose() {\n        this.setState({showModal: false});\n    }\n\n    render() {\n        const {restaurant} = this.props;\n        const iconUrl = restaurant.venue.categories[0].icon.prefix + '88' + restaurant.venue.categories[0].icon.suffix;\n        const address = restaurant.venue.location.address || 'Dhaka, Bangladesh';\n        return (\n            <Col xs={12} sm={12} md={6} lg={6}>\n                <Panel id=\"restaurant-panel\" onClick={this.handleModalShow}>\n                    <Panel.Heading>\n                        <Panel.Title componentClass=\"h3\">{restaurant.venue.name}</Panel.Title>\n                    </Panel.Heading>\n                    <Panel.Body>\n                        <img src={iconUrl} alt=\"icon\" height='100px' width=\"100px\"/>\n                        <div className=\"restaurant-info\">\n                            <p>{restaurant.venue.categories[0].name}</p>\n                            <p>{address}</p>\n                        </div>\n                    </Panel.Body>\n                </Panel>\n                <RestaurantModal showModal={this.state.showModal}\n                                 restaurant={ restaurant }\n                                 handleModalClose={this.handleModalClose}/>\n            </Col>\n        );\n    }\n}\n\nexport default RestaurantPanel;\n","import React, { Component } from 'react';\nimport { Grid, Row, Col, FormGroup, ControlLabel ,FormControl ,Button } from 'react-bootstrap';\nimport { searchNearbyRestaurants,searchForRandomRestaurants } from './utils/axios';\nimport RestaurantPanel from './components/RestaurantPanel';\nimport './styles/index.scss';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.searchRestaurants = this.searchRestaurants.bind(this);\n        this.searchRandomRestaurant = this.searchRandomRestaurant.bind(this);\n        this.showRestaurantDetails = this.showRestaurantDetails.bind(this);\n        this.state = {\n            searchTerm: '',\n            restaurants: []\n        };\n    }\n\n    showRestaurantDetails(restaurant){\n        return (\n            <RestaurantPanel key={restaurant.venue.id} restaurant={restaurant} />\n        );\n    }\n\n    handleInputChange(e) {\n        this.setState({ searchTerm: e.target.value });\n    }\n\n    searchRandomRestaurant(){\n        searchForRandomRestaurants().then((response) => {\n            this.setState({restaurants: [response.data.response.groups[0].items[Math.floor((Math.random() * 50))]]});\n        }).catch(function (error) {\n            // handle error\n            // console.log(error);\n        });\n    }\n\n    searchRestaurants(e){\n        if(e){\n            e.preventDefault();\n        }\n\n        searchNearbyRestaurants(this.state.searchTerm).then((response) => {\n            this.setState({restaurants: response.data.response.groups[0].items});\n        }).catch(function (error) {\n                // handle error\n                // console.log(error);\n            });\n    }\n\n    render() {\n        return (\n            <Grid fluid={true}>\n              <Row className=\"show-grid restaurant-finder-div\">\n                <Col xs={12} md={8} mdOffset={2} lg={8} lgOffset={2}>\n                  <form onSubmit={this.searchRestaurants} className=\"restaurant-finder-form\">\n                    <FormGroup>\n                      <ControlLabel>Search Restaurants</ControlLabel>\n                      <FormControl\n                          value={this.state.searchTerm}\n                          placeholder=\"Search Restaurants Using Keywords, Names, Etc\"\n                          onChange={this.handleInputChange}\n                          type=\"text\"\n                      />\n                    </FormGroup>\n                    <Col xs={12} md={6} className=\"random-search\">\n                      <Button\n                          block\n                          id=\"random-search\"\n                          onClick={this.searchRandomRestaurant}>Feeling lazy\n                      </Button>\n                    </Col>\n                    <Col xs={12} md={6} className=\"main-search\">\n                      <Button\n                          block\n                          id=\"search-with-keyword\"\n                          onClick={this.searchRestaurants}\n                          bsStyle=\"primary\">Search\n                      </Button>\n                    </Col>\n                  </form>\n                </Col>\n              </Row>\n              <Row className=\"show-grid restaurant-details\">\n                  {\n                      this.state.restaurants.map(this.showRestaurantDetails)\n                  }\n              </Row>\n            </Grid>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}